input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

input CartItemRelateToManyInput {
  create: [CartItemCreateInput]
  connect: [CartItemWhereUniqueInput]
  disconnect: [CartItemWhereUniqueInput]
  disconnectAll: Boolean
}

input OrderRelateToManyInput {
  create: [OrderCreateInput]
  connect: [OrderWhereUniqueInput]
  disconnect: [OrderWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type User {
  id: ID!
  nombre: String
  apellido: String
  telefono: String
  email: String
  password_is_set: Boolean
  rol: Role
  cart(
    where: CartItemWhereInput
    search: String
    sortBy: [SortCartItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [CartItem!]!
  _cartMeta(
    where: CartItemWhereInput
    search: String
    sortBy: [SortCartItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  ordenes(
    where: OrderWhereInput
    search: String
    sortBy: [SortOrdersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Order!]!
  _ordenesMeta(
    where: OrderWhereInput
    search: String
    sortBy: [SortOrdersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  nombre: String
  nombre_not: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  nombre_i: String
  nombre_not_i: String
  nombre_contains_i: String
  nombre_not_contains_i: String
  nombre_starts_with_i: String
  nombre_not_starts_with_i: String
  nombre_ends_with_i: String
  nombre_not_ends_with_i: String
  nombre_in: [String]
  nombre_not_in: [String]
  apellido: String
  apellido_not: String
  apellido_contains: String
  apellido_not_contains: String
  apellido_starts_with: String
  apellido_not_starts_with: String
  apellido_ends_with: String
  apellido_not_ends_with: String
  apellido_i: String
  apellido_not_i: String
  apellido_contains_i: String
  apellido_not_contains_i: String
  apellido_starts_with_i: String
  apellido_not_starts_with_i: String
  apellido_ends_with_i: String
  apellido_not_ends_with_i: String
  apellido_in: [String]
  apellido_not_in: [String]
  telefono: String
  telefono_not: String
  telefono_contains: String
  telefono_not_contains: String
  telefono_starts_with: String
  telefono_not_starts_with: String
  telefono_ends_with: String
  telefono_not_ends_with: String
  telefono_i: String
  telefono_not_i: String
  telefono_contains_i: String
  telefono_not_contains_i: String
  telefono_starts_with_i: String
  telefono_not_starts_with_i: String
  telefono_ends_with_i: String
  telefono_not_ends_with_i: String
  telefono_in: [String]
  telefono_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  rol: RoleWhereInput
  rol_is_null: Boolean

  """
   condition must be true for all nodes
  """
  cart_every: CartItemWhereInput

  """
   condition must be true for at least 1 node
  """
  cart_some: CartItemWhereInput

  """
   condition must be false for all nodes
  """
  cart_none: CartItemWhereInput

  """
   condition must be true for all nodes
  """
  ordenes_every: OrderWhereInput

  """
   condition must be true for at least 1 node
  """
  ordenes_some: OrderWhereInput

  """
   condition must be false for all nodes
  """
  ordenes_none: OrderWhereInput
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  nombre_ASC
  nombre_DESC
  apellido_ASC
  apellido_DESC
  telefono_ASC
  telefono_DESC
  email_ASC
  email_DESC
  rol_ASC
  rol_DESC
  cart_ASC
  cart_DESC
  ordenes_ASC
  ordenes_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
}

input UserUpdateInput {
  nombre: String
  apellido: String
  telefono: String
  email: String
  password: String
  rol: RoleRelateToOneInput
  cart: CartItemRelateToManyInput
  ordenes: OrderRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  nombre: String
  apellido: String
  telefono: String
  email: String
  password: String
  rol: RoleRelateToOneInput
  cart: CartItemRelateToManyInput
  ordenes: OrderRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input ProductImageRelateToManyInput {
  create: [ProductImageCreateInput]
  connect: [ProductImageWhereUniqueInput]
  disconnect: [ProductImageWhereUniqueInput]
  disconnectAll: Boolean
}

input TipoDePrendaRelateToOneInput {
  create: TipoDePrendaCreateInput
  connect: TipoDePrendaWhereUniqueInput
  disconnect: TipoDePrendaWhereUniqueInput
  disconnectAll: Boolean
}

input StockRelateToManyInput {
  create: [StockCreateInput]
  connect: [StockWhereUniqueInput]
  disconnect: [StockWhereUniqueInput]
  disconnectAll: Boolean
}

input BrandRelateToOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: BrandWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Product {
  id: ID!
  label: String
  articulo: String
  nombre: String
  slug: String
  descripcion: String
  imagen(
    where: ProductImageWhereInput
    search: String
    sortBy: [SortProductImagesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [ProductImage!]!
  _imagenMeta(
    where: ProductImageWhereInput
    search: String
    sortBy: [SortProductImagesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  status: String
  precio: Int
  tipoDePrenda: TipoDePrenda
  categoria: String
  stock(
    where: StockWhereInput
    search: String
    sortBy: [SortStocksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Stock!]!
  _stockMeta(
    where: StockWhereInput
    search: String
    sortBy: [SortStocksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  marca: Brand
}

input ProductWhereInput {
  AND: [ProductWhereInput]
  OR: [ProductWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  articulo: String
  articulo_not: String
  articulo_contains: String
  articulo_not_contains: String
  articulo_starts_with: String
  articulo_not_starts_with: String
  articulo_ends_with: String
  articulo_not_ends_with: String
  articulo_i: String
  articulo_not_i: String
  articulo_contains_i: String
  articulo_not_contains_i: String
  articulo_starts_with_i: String
  articulo_not_starts_with_i: String
  articulo_ends_with_i: String
  articulo_not_ends_with_i: String
  articulo_in: [String]
  articulo_not_in: [String]
  nombre: String
  nombre_not: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  nombre_i: String
  nombre_not_i: String
  nombre_contains_i: String
  nombre_not_contains_i: String
  nombre_starts_with_i: String
  nombre_not_starts_with_i: String
  nombre_ends_with_i: String
  nombre_not_ends_with_i: String
  nombre_in: [String]
  nombre_not_in: [String]
  descripcion: String
  descripcion_not: String
  descripcion_contains: String
  descripcion_not_contains: String
  descripcion_starts_with: String
  descripcion_not_starts_with: String
  descripcion_ends_with: String
  descripcion_not_ends_with: String
  descripcion_i: String
  descripcion_not_i: String
  descripcion_contains_i: String
  descripcion_not_contains_i: String
  descripcion_starts_with_i: String
  descripcion_not_starts_with_i: String
  descripcion_ends_with_i: String
  descripcion_not_ends_with_i: String
  descripcion_in: [String]
  descripcion_not_in: [String]

  """
   condition must be true for all nodes
  """
  imagen_every: ProductImageWhereInput

  """
   condition must be true for at least 1 node
  """
  imagen_some: ProductImageWhereInput

  """
   condition must be false for all nodes
  """
  imagen_none: ProductImageWhereInput
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  precio: Int
  precio_not: Int
  precio_lt: Int
  precio_lte: Int
  precio_gt: Int
  precio_gte: Int
  precio_in: [Int]
  precio_not_in: [Int]
  tipoDePrenda: TipoDePrendaWhereInput
  tipoDePrenda_is_null: Boolean
  categoria: String
  categoria_not: String
  categoria_in: [String]
  categoria_not_in: [String]

  """
   condition must be true for all nodes
  """
  stock_every: StockWhereInput

  """
   condition must be true for at least 1 node
  """
  stock_some: StockWhereInput

  """
   condition must be false for all nodes
  """
  stock_none: StockWhereInput
  marca: BrandWhereInput
  marca_is_null: Boolean
}

input ProductWhereUniqueInput {
  id: ID!
}

enum SortProductsBy {
  id_ASC
  id_DESC
  articulo_ASC
  articulo_DESC
  nombre_ASC
  nombre_DESC
  descripcion_ASC
  descripcion_DESC
  imagen_ASC
  imagen_DESC
  status_ASC
  status_DESC
  precio_ASC
  precio_DESC
  tipoDePrenda_ASC
  tipoDePrenda_DESC
  categoria_ASC
  categoria_DESC
  stock_ASC
  stock_DESC
  marca_ASC
  marca_DESC
}

input ProductUpdateInput {
  articulo: String
  nombre: String
  descripcion: String
  imagen: ProductImageRelateToManyInput
  status: String
  precio: Int
  tipoDePrenda: TipoDePrendaRelateToOneInput
  categoria: String
  stock: StockRelateToManyInput
  marca: BrandRelateToOneInput
}

input ProductsUpdateInput {
  id: ID!
  data: ProductUpdateInput
}

input ProductCreateInput {
  articulo: String
  nombre: String
  descripcion: String
  imagen: ProductImageRelateToManyInput
  status: String
  precio: Int
  tipoDePrenda: TipoDePrendaRelateToOneInput
  categoria: String
  stock: StockRelateToManyInput
  marca: BrandRelateToOneInput
}

input ProductsCreateInput {
  data: ProductCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

"""
 A keystone list
"""
type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput]
  OR: [ProductImageWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
}

input ProductImageWhereUniqueInput {
  id: ID!
}

enum SortProductImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
}

input ProductImagesUpdateInput {
  id: ID!
  data: ProductImageUpdateInput
}

input ProductImageCreateInput {
  image: Upload
  altText: String
}

input ProductImagesCreateInput {
  data: ProductImageCreateInput
}

input ProductRelateToOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Stock {
  id: ID!
  label: String
  producto: Product
  color: String
  nombreTalle1: String
  cantidadTalle1: Int
  nombreTalle2: String
  cantidadTalle2: Int
  nombreTalle3: String
  cantidadTalle3: Int
  nombreTalle4: String
  cantidadTalle4: Int
  nombreTalle5: String
  cantidadTalle5: Int
  nombreTalle6: String
  cantidadTalle6: Int
  nombreTalle7: String
  cantidadTalle7: Int
}

input StockWhereInput {
  AND: [StockWhereInput]
  OR: [StockWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  producto: ProductWhereInput
  producto_is_null: Boolean
  color: String
  color_not: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  color_i: String
  color_not_i: String
  color_contains_i: String
  color_not_contains_i: String
  color_starts_with_i: String
  color_not_starts_with_i: String
  color_ends_with_i: String
  color_not_ends_with_i: String
  color_in: [String]
  color_not_in: [String]
  nombreTalle1: String
  nombreTalle1_not: String
  nombreTalle1_contains: String
  nombreTalle1_not_contains: String
  nombreTalle1_starts_with: String
  nombreTalle1_not_starts_with: String
  nombreTalle1_ends_with: String
  nombreTalle1_not_ends_with: String
  nombreTalle1_i: String
  nombreTalle1_not_i: String
  nombreTalle1_contains_i: String
  nombreTalle1_not_contains_i: String
  nombreTalle1_starts_with_i: String
  nombreTalle1_not_starts_with_i: String
  nombreTalle1_ends_with_i: String
  nombreTalle1_not_ends_with_i: String
  nombreTalle1_in: [String]
  nombreTalle1_not_in: [String]
  cantidadTalle1: Int
  cantidadTalle1_not: Int
  cantidadTalle1_lt: Int
  cantidadTalle1_lte: Int
  cantidadTalle1_gt: Int
  cantidadTalle1_gte: Int
  cantidadTalle1_in: [Int]
  cantidadTalle1_not_in: [Int]
  nombreTalle2: String
  nombreTalle2_not: String
  nombreTalle2_contains: String
  nombreTalle2_not_contains: String
  nombreTalle2_starts_with: String
  nombreTalle2_not_starts_with: String
  nombreTalle2_ends_with: String
  nombreTalle2_not_ends_with: String
  nombreTalle2_i: String
  nombreTalle2_not_i: String
  nombreTalle2_contains_i: String
  nombreTalle2_not_contains_i: String
  nombreTalle2_starts_with_i: String
  nombreTalle2_not_starts_with_i: String
  nombreTalle2_ends_with_i: String
  nombreTalle2_not_ends_with_i: String
  nombreTalle2_in: [String]
  nombreTalle2_not_in: [String]
  cantidadTalle2: Int
  cantidadTalle2_not: Int
  cantidadTalle2_lt: Int
  cantidadTalle2_lte: Int
  cantidadTalle2_gt: Int
  cantidadTalle2_gte: Int
  cantidadTalle2_in: [Int]
  cantidadTalle2_not_in: [Int]
  nombreTalle3: String
  nombreTalle3_not: String
  nombreTalle3_contains: String
  nombreTalle3_not_contains: String
  nombreTalle3_starts_with: String
  nombreTalle3_not_starts_with: String
  nombreTalle3_ends_with: String
  nombreTalle3_not_ends_with: String
  nombreTalle3_i: String
  nombreTalle3_not_i: String
  nombreTalle3_contains_i: String
  nombreTalle3_not_contains_i: String
  nombreTalle3_starts_with_i: String
  nombreTalle3_not_starts_with_i: String
  nombreTalle3_ends_with_i: String
  nombreTalle3_not_ends_with_i: String
  nombreTalle3_in: [String]
  nombreTalle3_not_in: [String]
  cantidadTalle3: Int
  cantidadTalle3_not: Int
  cantidadTalle3_lt: Int
  cantidadTalle3_lte: Int
  cantidadTalle3_gt: Int
  cantidadTalle3_gte: Int
  cantidadTalle3_in: [Int]
  cantidadTalle3_not_in: [Int]
  nombreTalle4: String
  nombreTalle4_not: String
  nombreTalle4_contains: String
  nombreTalle4_not_contains: String
  nombreTalle4_starts_with: String
  nombreTalle4_not_starts_with: String
  nombreTalle4_ends_with: String
  nombreTalle4_not_ends_with: String
  nombreTalle4_i: String
  nombreTalle4_not_i: String
  nombreTalle4_contains_i: String
  nombreTalle4_not_contains_i: String
  nombreTalle4_starts_with_i: String
  nombreTalle4_not_starts_with_i: String
  nombreTalle4_ends_with_i: String
  nombreTalle4_not_ends_with_i: String
  nombreTalle4_in: [String]
  nombreTalle4_not_in: [String]
  cantidadTalle4: Int
  cantidadTalle4_not: Int
  cantidadTalle4_lt: Int
  cantidadTalle4_lte: Int
  cantidadTalle4_gt: Int
  cantidadTalle4_gte: Int
  cantidadTalle4_in: [Int]
  cantidadTalle4_not_in: [Int]
  nombreTalle5: String
  nombreTalle5_not: String
  nombreTalle5_contains: String
  nombreTalle5_not_contains: String
  nombreTalle5_starts_with: String
  nombreTalle5_not_starts_with: String
  nombreTalle5_ends_with: String
  nombreTalle5_not_ends_with: String
  nombreTalle5_i: String
  nombreTalle5_not_i: String
  nombreTalle5_contains_i: String
  nombreTalle5_not_contains_i: String
  nombreTalle5_starts_with_i: String
  nombreTalle5_not_starts_with_i: String
  nombreTalle5_ends_with_i: String
  nombreTalle5_not_ends_with_i: String
  nombreTalle5_in: [String]
  nombreTalle5_not_in: [String]
  cantidadTalle5: Int
  cantidadTalle5_not: Int
  cantidadTalle5_lt: Int
  cantidadTalle5_lte: Int
  cantidadTalle5_gt: Int
  cantidadTalle5_gte: Int
  cantidadTalle5_in: [Int]
  cantidadTalle5_not_in: [Int]
  nombreTalle6: String
  nombreTalle6_not: String
  nombreTalle6_contains: String
  nombreTalle6_not_contains: String
  nombreTalle6_starts_with: String
  nombreTalle6_not_starts_with: String
  nombreTalle6_ends_with: String
  nombreTalle6_not_ends_with: String
  nombreTalle6_i: String
  nombreTalle6_not_i: String
  nombreTalle6_contains_i: String
  nombreTalle6_not_contains_i: String
  nombreTalle6_starts_with_i: String
  nombreTalle6_not_starts_with_i: String
  nombreTalle6_ends_with_i: String
  nombreTalle6_not_ends_with_i: String
  nombreTalle6_in: [String]
  nombreTalle6_not_in: [String]
  cantidadTalle6: Int
  cantidadTalle6_not: Int
  cantidadTalle6_lt: Int
  cantidadTalle6_lte: Int
  cantidadTalle6_gt: Int
  cantidadTalle6_gte: Int
  cantidadTalle6_in: [Int]
  cantidadTalle6_not_in: [Int]
  nombreTalle7: String
  nombreTalle7_not: String
  nombreTalle7_contains: String
  nombreTalle7_not_contains: String
  nombreTalle7_starts_with: String
  nombreTalle7_not_starts_with: String
  nombreTalle7_ends_with: String
  nombreTalle7_not_ends_with: String
  nombreTalle7_i: String
  nombreTalle7_not_i: String
  nombreTalle7_contains_i: String
  nombreTalle7_not_contains_i: String
  nombreTalle7_starts_with_i: String
  nombreTalle7_not_starts_with_i: String
  nombreTalle7_ends_with_i: String
  nombreTalle7_not_ends_with_i: String
  nombreTalle7_in: [String]
  nombreTalle7_not_in: [String]
  cantidadTalle7: Int
  cantidadTalle7_not: Int
  cantidadTalle7_lt: Int
  cantidadTalle7_lte: Int
  cantidadTalle7_gt: Int
  cantidadTalle7_gte: Int
  cantidadTalle7_in: [Int]
  cantidadTalle7_not_in: [Int]
}

input StockWhereUniqueInput {
  id: ID!
}

enum SortStocksBy {
  id_ASC
  id_DESC
  producto_ASC
  producto_DESC
  color_ASC
  color_DESC
  nombreTalle1_ASC
  nombreTalle1_DESC
  cantidadTalle1_ASC
  cantidadTalle1_DESC
  nombreTalle2_ASC
  nombreTalle2_DESC
  cantidadTalle2_ASC
  cantidadTalle2_DESC
  nombreTalle3_ASC
  nombreTalle3_DESC
  cantidadTalle3_ASC
  cantidadTalle3_DESC
  nombreTalle4_ASC
  nombreTalle4_DESC
  cantidadTalle4_ASC
  cantidadTalle4_DESC
  nombreTalle5_ASC
  nombreTalle5_DESC
  cantidadTalle5_ASC
  cantidadTalle5_DESC
  nombreTalle6_ASC
  nombreTalle6_DESC
  cantidadTalle6_ASC
  cantidadTalle6_DESC
  nombreTalle7_ASC
  nombreTalle7_DESC
  cantidadTalle7_ASC
  cantidadTalle7_DESC
}

input StockUpdateInput {
  producto: ProductRelateToOneInput
  color: String
  nombreTalle1: String
  cantidadTalle1: Int
  nombreTalle2: String
  cantidadTalle2: Int
  nombreTalle3: String
  cantidadTalle3: Int
  nombreTalle4: String
  cantidadTalle4: Int
  nombreTalle5: String
  cantidadTalle5: Int
  nombreTalle6: String
  cantidadTalle6: Int
  nombreTalle7: String
  cantidadTalle7: Int
}

input StocksUpdateInput {
  id: ID!
  data: StockUpdateInput
}

input StockCreateInput {
  producto: ProductRelateToOneInput
  color: String
  nombreTalle1: String
  cantidadTalle1: Int
  nombreTalle2: String
  cantidadTalle2: Int
  nombreTalle3: String
  cantidadTalle3: Int
  nombreTalle4: String
  cantidadTalle4: Int
  nombreTalle5: String
  cantidadTalle5: Int
  nombreTalle6: String
  cantidadTalle6: Int
  nombreTalle7: String
  cantidadTalle7: Int
}

input StocksCreateInput {
  data: StockCreateInput
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Role {
  id: ID!
  nombre: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  asignado(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [User!]!
  _asignadoMeta(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input RoleWhereInput {
  AND: [RoleWhereInput]
  OR: [RoleWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  nombre: String
  nombre_not: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  nombre_i: String
  nombre_not_i: String
  nombre_contains_i: String
  nombre_not_contains_i: String
  nombre_starts_with_i: String
  nombre_not_starts_with_i: String
  nombre_ends_with_i: String
  nombre_not_ends_with_i: String
  nombre_in: [String]
  nombre_not_in: [String]
  canManageProducts: Boolean
  canManageProducts_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  canManageCart: Boolean
  canManageCart_not: Boolean
  canManageOrders: Boolean
  canManageOrders_not: Boolean

  """
   condition must be true for all nodes
  """
  asignado_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  asignado_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  asignado_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID!
}

enum SortRolesBy {
  id_ASC
  id_DESC
  nombre_ASC
  nombre_DESC
  canManageProducts_ASC
  canManageProducts_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageRoles_ASC
  canManageRoles_DESC
  canManageCart_ASC
  canManageCart_DESC
  canManageOrders_ASC
  canManageOrders_DESC
  asignado_ASC
  asignado_DESC
}

input RoleUpdateInput {
  nombre: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  asignado: UserRelateToManyInput
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

input RoleCreateInput {
  nombre: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  asignado: UserRelateToManyInput
}

input RolesCreateInput {
  data: RoleCreateInput
}

input OrderRelateToOneInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: OrderWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type OrderItem {
  id: ID!
  articulo: String
  nombre: String
  slug: String
  descripcion: String
  imagen(
    where: ProductImageWhereInput
    search: String
    sortBy: [SortProductImagesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [ProductImage!]!
  _imagenMeta(
    where: ProductImageWhereInput
    search: String
    sortBy: [SortProductImagesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  status: String
  precio: Int
  tipoDePrenda: String
  talle: String
  color: String
  cantidad: Int
  marca: String
  orden: Order
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput]
  OR: [OrderItemWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  articulo: String
  articulo_not: String
  articulo_contains: String
  articulo_not_contains: String
  articulo_starts_with: String
  articulo_not_starts_with: String
  articulo_ends_with: String
  articulo_not_ends_with: String
  articulo_i: String
  articulo_not_i: String
  articulo_contains_i: String
  articulo_not_contains_i: String
  articulo_starts_with_i: String
  articulo_not_starts_with_i: String
  articulo_ends_with_i: String
  articulo_not_ends_with_i: String
  articulo_in: [String]
  articulo_not_in: [String]
  nombre: String
  nombre_not: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  nombre_i: String
  nombre_not_i: String
  nombre_contains_i: String
  nombre_not_contains_i: String
  nombre_starts_with_i: String
  nombre_not_starts_with_i: String
  nombre_ends_with_i: String
  nombre_not_ends_with_i: String
  nombre_in: [String]
  nombre_not_in: [String]
  descripcion: String
  descripcion_not: String
  descripcion_contains: String
  descripcion_not_contains: String
  descripcion_starts_with: String
  descripcion_not_starts_with: String
  descripcion_ends_with: String
  descripcion_not_ends_with: String
  descripcion_i: String
  descripcion_not_i: String
  descripcion_contains_i: String
  descripcion_not_contains_i: String
  descripcion_starts_with_i: String
  descripcion_not_starts_with_i: String
  descripcion_ends_with_i: String
  descripcion_not_ends_with_i: String
  descripcion_in: [String]
  descripcion_not_in: [String]

  """
   condition must be true for all nodes
  """
  imagen_every: ProductImageWhereInput

  """
   condition must be true for at least 1 node
  """
  imagen_some: ProductImageWhereInput

  """
   condition must be false for all nodes
  """
  imagen_none: ProductImageWhereInput
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  precio: Int
  precio_not: Int
  precio_lt: Int
  precio_lte: Int
  precio_gt: Int
  precio_gte: Int
  precio_in: [Int]
  precio_not_in: [Int]
  tipoDePrenda: String
  tipoDePrenda_not: String
  tipoDePrenda_in: [String]
  tipoDePrenda_not_in: [String]
  talle: String
  talle_not: String
  talle_contains: String
  talle_not_contains: String
  talle_starts_with: String
  talle_not_starts_with: String
  talle_ends_with: String
  talle_not_ends_with: String
  talle_i: String
  talle_not_i: String
  talle_contains_i: String
  talle_not_contains_i: String
  talle_starts_with_i: String
  talle_not_starts_with_i: String
  talle_ends_with_i: String
  talle_not_ends_with_i: String
  talle_in: [String]
  talle_not_in: [String]
  color: String
  color_not: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  color_i: String
  color_not_i: String
  color_contains_i: String
  color_not_contains_i: String
  color_starts_with_i: String
  color_not_starts_with_i: String
  color_ends_with_i: String
  color_not_ends_with_i: String
  color_in: [String]
  color_not_in: [String]
  cantidad: Int
  cantidad_not: Int
  cantidad_lt: Int
  cantidad_lte: Int
  cantidad_gt: Int
  cantidad_gte: Int
  cantidad_in: [Int]
  cantidad_not_in: [Int]
  marca: String
  marca_not: String
  marca_in: [String]
  marca_not_in: [String]
  orden: OrderWhereInput
  orden_is_null: Boolean
}

input OrderItemWhereUniqueInput {
  id: ID!
}

enum SortOrderItemsBy {
  id_ASC
  id_DESC
  articulo_ASC
  articulo_DESC
  nombre_ASC
  nombre_DESC
  descripcion_ASC
  descripcion_DESC
  imagen_ASC
  imagen_DESC
  status_ASC
  status_DESC
  precio_ASC
  precio_DESC
  tipoDePrenda_ASC
  tipoDePrenda_DESC
  talle_ASC
  talle_DESC
  color_ASC
  color_DESC
  cantidad_ASC
  cantidad_DESC
  marca_ASC
  marca_DESC
  orden_ASC
  orden_DESC
}

input OrderItemUpdateInput {
  articulo: String
  nombre: String
  descripcion: String
  imagen: ProductImageRelateToManyInput
  status: String
  precio: Int
  tipoDePrenda: String
  talle: String
  color: String
  cantidad: Int
  marca: String
  orden: OrderRelateToOneInput
}

input OrderItemsUpdateInput {
  id: ID!
  data: OrderItemUpdateInput
}

input OrderItemCreateInput {
  articulo: String
  nombre: String
  descripcion: String
  imagen: ProductImageRelateToManyInput
  status: String
  precio: Int
  tipoDePrenda: String
  talle: String
  color: String
  cantidad: Int
  marca: String
  orden: OrderRelateToOneInput
}

input OrderItemsCreateInput {
  data: OrderItemCreateInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type CartItem {
  id: ID!
  cantidad: Int
  producto: Product
  usuario: User
}

input CartItemWhereInput {
  AND: [CartItemWhereInput]
  OR: [CartItemWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  cantidad: Int
  cantidad_not: Int
  cantidad_lt: Int
  cantidad_lte: Int
  cantidad_gt: Int
  cantidad_gte: Int
  cantidad_in: [Int]
  cantidad_not_in: [Int]
  producto: ProductWhereInput
  producto_is_null: Boolean
  usuario: UserWhereInput
  usuario_is_null: Boolean
}

input CartItemWhereUniqueInput {
  id: ID!
}

enum SortCartItemsBy {
  id_ASC
  id_DESC
  cantidad_ASC
  cantidad_DESC
  producto_ASC
  producto_DESC
  usuario_ASC
  usuario_DESC
}

input CartItemUpdateInput {
  cantidad: Int
  producto: ProductRelateToOneInput
  usuario: UserRelateToOneInput
}

input CartItemsUpdateInput {
  id: ID!
  data: CartItemUpdateInput
}

input CartItemCreateInput {
  cantidad: Int
  producto: ProductRelateToOneInput
  usuario: UserRelateToOneInput
}

input CartItemsCreateInput {
  data: CartItemCreateInput
}

input OrderItemRelateToManyInput {
  create: [OrderItemCreateInput]
  connect: [OrderItemWhereUniqueInput]
  disconnect: [OrderItemWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Order {
  id: ID!
  label: String
  total: Int
  items(
    where: OrderItemWhereInput
    search: String
    sortBy: [SortOrderItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [OrderItem!]!
  _itemsMeta(
    where: OrderItemWhereInput
    search: String
    sortBy: [SortOrderItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  usuario: User
  charge: Int
}

input OrderWhereInput {
  AND: [OrderWhereInput]
  OR: [OrderWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  total: Int
  total_not: Int
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int]
  total_not_in: [Int]

  """
   condition must be true for all nodes
  """
  items_every: OrderItemWhereInput

  """
   condition must be true for at least 1 node
  """
  items_some: OrderItemWhereInput

  """
   condition must be false for all nodes
  """
  items_none: OrderItemWhereInput
  usuario: UserWhereInput
  usuario_is_null: Boolean
  charge: Int
  charge_not: Int
  charge_lt: Int
  charge_lte: Int
  charge_gt: Int
  charge_gte: Int
  charge_in: [Int]
  charge_not_in: [Int]
}

input OrderWhereUniqueInput {
  id: ID!
}

enum SortOrdersBy {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  items_ASC
  items_DESC
  usuario_ASC
  usuario_DESC
  charge_ASC
  charge_DESC
}

input OrderUpdateInput {
  total: Int
  items: OrderItemRelateToManyInput
  usuario: UserRelateToOneInput
  charge: Int
}

input OrdersUpdateInput {
  id: ID!
  data: OrderUpdateInput
}

input OrderCreateInput {
  total: Int
  items: OrderItemRelateToManyInput
  usuario: UserRelateToOneInput
  charge: Int
}

input OrdersCreateInput {
  data: OrderCreateInput
}

input TipoDePrendaRelateToManyInput {
  create: [TipoDePrendaCreateInput]
  connect: [TipoDePrendaWhereUniqueInput]
  disconnect: [TipoDePrendaWhereUniqueInput]
  disconnectAll: Boolean
}

input ProductRelateToManyInput {
  create: [ProductCreateInput]
  connect: [ProductWhereUniqueInput]
  disconnect: [ProductWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Brand {
  id: ID!
  label: String
  marca: String
  slug: String
  tipoDePrenda(
    where: TipoDePrendaWhereInput
    search: String
    sortBy: [SortTipoDePrendasBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [TipoDePrenda!]!
  _tipoDePrendaMeta(
    where: TipoDePrendaWhereInput
    search: String
    sortBy: [SortTipoDePrendasBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  producto(
    where: ProductWhereInput
    search: String
    sortBy: [SortProductsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Product!]!
  _productoMeta(
    where: ProductWhereInput
    search: String
    sortBy: [SortProductsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input BrandWhereInput {
  AND: [BrandWhereInput]
  OR: [BrandWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  marca: String
  marca_not: String
  marca_contains: String
  marca_not_contains: String
  marca_starts_with: String
  marca_not_starts_with: String
  marca_ends_with: String
  marca_not_ends_with: String
  marca_i: String
  marca_not_i: String
  marca_contains_i: String
  marca_not_contains_i: String
  marca_starts_with_i: String
  marca_not_starts_with_i: String
  marca_ends_with_i: String
  marca_not_ends_with_i: String
  marca_in: [String]
  marca_not_in: [String]

  """
   condition must be true for all nodes
  """
  tipoDePrenda_every: TipoDePrendaWhereInput

  """
   condition must be true for at least 1 node
  """
  tipoDePrenda_some: TipoDePrendaWhereInput

  """
   condition must be false for all nodes
  """
  tipoDePrenda_none: TipoDePrendaWhereInput

  """
   condition must be true for all nodes
  """
  producto_every: ProductWhereInput

  """
   condition must be true for at least 1 node
  """
  producto_some: ProductWhereInput

  """
   condition must be false for all nodes
  """
  producto_none: ProductWhereInput
}

input BrandWhereUniqueInput {
  id: ID!
}

enum SortBrandsBy {
  id_ASC
  id_DESC
  marca_ASC
  marca_DESC
  tipoDePrenda_ASC
  tipoDePrenda_DESC
  producto_ASC
  producto_DESC
}

input BrandUpdateInput {
  marca: String
  tipoDePrenda: TipoDePrendaRelateToManyInput
  producto: ProductRelateToManyInput
}

input BrandsUpdateInput {
  id: ID!
  data: BrandUpdateInput
}

input BrandCreateInput {
  marca: String
  tipoDePrenda: TipoDePrendaRelateToManyInput
  producto: ProductRelateToManyInput
}

input BrandsCreateInput {
  data: BrandCreateInput
}

"""
 A keystone list
"""
type TipoDePrenda {
  id: ID!
  label: String
  tipo: String
  slug: String
  producto(
    where: ProductWhereInput
    search: String
    sortBy: [SortProductsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Product!]!
  _productoMeta(
    where: ProductWhereInput
    search: String
    sortBy: [SortProductsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input TipoDePrendaWhereInput {
  AND: [TipoDePrendaWhereInput]
  OR: [TipoDePrendaWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  tipo: String
  tipo_not: String
  tipo_contains: String
  tipo_not_contains: String
  tipo_starts_with: String
  tipo_not_starts_with: String
  tipo_ends_with: String
  tipo_not_ends_with: String
  tipo_i: String
  tipo_not_i: String
  tipo_contains_i: String
  tipo_not_contains_i: String
  tipo_starts_with_i: String
  tipo_not_starts_with_i: String
  tipo_ends_with_i: String
  tipo_not_ends_with_i: String
  tipo_in: [String]
  tipo_not_in: [String]

  """
   condition must be true for all nodes
  """
  producto_every: ProductWhereInput

  """
   condition must be true for at least 1 node
  """
  producto_some: ProductWhereInput

  """
   condition must be false for all nodes
  """
  producto_none: ProductWhereInput
}

input TipoDePrendaWhereUniqueInput {
  id: ID!
}

enum SortTipoDePrendasBy {
  id_ASC
  id_DESC
  tipo_ASC
  tipo_DESC
  producto_ASC
  producto_DESC
}

input TipoDePrendaUpdateInput {
  tipo: String
  producto: ProductRelateToManyInput
}

input TipoDePrendasUpdateInput {
  id: ID!
  data: TipoDePrendaUpdateInput
}

input TipoDePrendaCreateInput {
  tipo: String
  producto: ProductRelateToManyInput
}

input TipoDePrendasCreateInput {
  data: TipoDePrendaCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Product item.
  """
  createProduct(data: ProductCreateInput): Product

  """
   Create multiple Product items.
  """
  createProducts(data: [ProductsCreateInput]): [Product]

  """
   Update a single Product item by ID.
  """
  updateProduct(id: ID!, data: ProductUpdateInput): Product

  """
   Update multiple Product items by ID.
  """
  updateProducts(data: [ProductsUpdateInput]): [Product]

  """
   Delete a single Product item by ID.
  """
  deleteProduct(id: ID!): Product

  """
   Delete multiple Product items by ID.
  """
  deleteProducts(ids: [ID!]): [Product]

  """
   Create a single ProductImage item.
  """
  createProductImage(data: ProductImageCreateInput): ProductImage

  """
   Create multiple ProductImage items.
  """
  createProductImages(data: [ProductImagesCreateInput]): [ProductImage]

  """
   Update a single ProductImage item by ID.
  """
  updateProductImage(id: ID!, data: ProductImageUpdateInput): ProductImage

  """
   Update multiple ProductImage items by ID.
  """
  updateProductImages(data: [ProductImagesUpdateInput]): [ProductImage]

  """
   Delete a single ProductImage item by ID.
  """
  deleteProductImage(id: ID!): ProductImage

  """
   Delete multiple ProductImage items by ID.
  """
  deleteProductImages(ids: [ID!]): [ProductImage]

  """
   Create a single Stock item.
  """
  createStock(data: StockCreateInput): Stock

  """
   Create multiple Stock items.
  """
  createStocks(data: [StocksCreateInput]): [Stock]

  """
   Update a single Stock item by ID.
  """
  updateStock(id: ID!, data: StockUpdateInput): Stock

  """
   Update multiple Stock items by ID.
  """
  updateStocks(data: [StocksUpdateInput]): [Stock]

  """
   Delete a single Stock item by ID.
  """
  deleteStock(id: ID!): Stock

  """
   Delete multiple Stock items by ID.
  """
  deleteStocks(ids: [ID!]): [Stock]

  """
   Create a single Role item.
  """
  createRole(data: RoleCreateInput): Role

  """
   Create multiple Role items.
  """
  createRoles(data: [RolesCreateInput]): [Role]

  """
   Update a single Role item by ID.
  """
  updateRole(id: ID!, data: RoleUpdateInput): Role

  """
   Update multiple Role items by ID.
  """
  updateRoles(data: [RolesUpdateInput]): [Role]

  """
   Delete a single Role item by ID.
  """
  deleteRole(id: ID!): Role

  """
   Delete multiple Role items by ID.
  """
  deleteRoles(ids: [ID!]): [Role]

  """
   Create a single OrderItem item.
  """
  createOrderItem(data: OrderItemCreateInput): OrderItem

  """
   Create multiple OrderItem items.
  """
  createOrderItems(data: [OrderItemsCreateInput]): [OrderItem]

  """
   Update a single OrderItem item by ID.
  """
  updateOrderItem(id: ID!, data: OrderItemUpdateInput): OrderItem

  """
   Update multiple OrderItem items by ID.
  """
  updateOrderItems(data: [OrderItemsUpdateInput]): [OrderItem]

  """
   Delete a single OrderItem item by ID.
  """
  deleteOrderItem(id: ID!): OrderItem

  """
   Delete multiple OrderItem items by ID.
  """
  deleteOrderItems(ids: [ID!]): [OrderItem]

  """
   Create a single CartItem item.
  """
  createCartItem(data: CartItemCreateInput): CartItem

  """
   Create multiple CartItem items.
  """
  createCartItems(data: [CartItemsCreateInput]): [CartItem]

  """
   Update a single CartItem item by ID.
  """
  updateCartItem(id: ID!, data: CartItemUpdateInput): CartItem

  """
   Update multiple CartItem items by ID.
  """
  updateCartItems(data: [CartItemsUpdateInput]): [CartItem]

  """
   Delete a single CartItem item by ID.
  """
  deleteCartItem(id: ID!): CartItem

  """
   Delete multiple CartItem items by ID.
  """
  deleteCartItems(ids: [ID!]): [CartItem]

  """
   Create a single Order item.
  """
  createOrder(data: OrderCreateInput): Order

  """
   Create multiple Order items.
  """
  createOrders(data: [OrdersCreateInput]): [Order]

  """
   Update a single Order item by ID.
  """
  updateOrder(id: ID!, data: OrderUpdateInput): Order

  """
   Update multiple Order items by ID.
  """
  updateOrders(data: [OrdersUpdateInput]): [Order]

  """
   Delete a single Order item by ID.
  """
  deleteOrder(id: ID!): Order

  """
   Delete multiple Order items by ID.
  """
  deleteOrders(ids: [ID!]): [Order]

  """
   Create a single Brand item.
  """
  createBrand(data: BrandCreateInput): Brand

  """
   Create multiple Brand items.
  """
  createBrands(data: [BrandsCreateInput]): [Brand]

  """
   Update a single Brand item by ID.
  """
  updateBrand(id: ID!, data: BrandUpdateInput): Brand

  """
   Update multiple Brand items by ID.
  """
  updateBrands(data: [BrandsUpdateInput]): [Brand]

  """
   Delete a single Brand item by ID.
  """
  deleteBrand(id: ID!): Brand

  """
   Delete multiple Brand items by ID.
  """
  deleteBrands(ids: [ID!]): [Brand]

  """
   Create a single TipoDePrenda item.
  """
  createTipoDePrenda(data: TipoDePrendaCreateInput): TipoDePrenda

  """
   Create multiple TipoDePrenda items.
  """
  createTipoDePrendas(data: [TipoDePrendasCreateInput]): [TipoDePrenda]

  """
   Update a single TipoDePrenda item by ID.
  """
  updateTipoDePrenda(id: ID!, data: TipoDePrendaUpdateInput): TipoDePrenda

  """
   Update multiple TipoDePrenda items by ID.
  """
  updateTipoDePrendas(data: [TipoDePrendasUpdateInput]): [TipoDePrenda]

  """
   Delete a single TipoDePrenda item by ID.
  """
  deleteTipoDePrenda(id: ID!): TipoDePrenda

  """
   Delete multiple TipoDePrenda items by ID.
  """
  deleteTipoDePrendas(ids: [ID!]): [TipoDePrenda]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  endSession: Boolean!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  nombre: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [User]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Product items which match the where clause.
  """
  allProducts(
    where: ProductWhereInput
    search: String
    sortBy: [SortProductsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Product]

  """
   Search for the Product item with the matching ID.
  """
  Product(where: ProductWhereUniqueInput!): Product

  """
   Perform a meta-query on all Product items which match the where clause.
  """
  _allProductsMeta(
    where: ProductWhereInput
    search: String
    sortBy: [SortProductsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all ProductImage items which match the where clause.
  """
  allProductImages(
    where: ProductImageWhereInput
    search: String
    sortBy: [SortProductImagesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [ProductImage]

  """
   Search for the ProductImage item with the matching ID.
  """
  ProductImage(where: ProductImageWhereUniqueInput!): ProductImage

  """
   Perform a meta-query on all ProductImage items which match the where clause.
  """
  _allProductImagesMeta(
    where: ProductImageWhereInput
    search: String
    sortBy: [SortProductImagesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Stock items which match the where clause.
  """
  allStocks(
    where: StockWhereInput
    search: String
    sortBy: [SortStocksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Stock]

  """
   Search for the Stock item with the matching ID.
  """
  Stock(where: StockWhereUniqueInput!): Stock

  """
   Perform a meta-query on all Stock items which match the where clause.
  """
  _allStocksMeta(
    where: StockWhereInput
    search: String
    sortBy: [SortStocksBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Role items which match the where clause.
  """
  allRoles(
    where: RoleWhereInput
    search: String
    sortBy: [SortRolesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Role]

  """
   Search for the Role item with the matching ID.
  """
  Role(where: RoleWhereUniqueInput!): Role

  """
   Perform a meta-query on all Role items which match the where clause.
  """
  _allRolesMeta(
    where: RoleWhereInput
    search: String
    sortBy: [SortRolesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all OrderItem items which match the where clause.
  """
  allOrderItems(
    where: OrderItemWhereInput
    search: String
    sortBy: [SortOrderItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [OrderItem]

  """
   Search for the OrderItem item with the matching ID.
  """
  OrderItem(where: OrderItemWhereUniqueInput!): OrderItem

  """
   Perform a meta-query on all OrderItem items which match the where clause.
  """
  _allOrderItemsMeta(
    where: OrderItemWhereInput
    search: String
    sortBy: [SortOrderItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all CartItem items which match the where clause.
  """
  allCartItems(
    where: CartItemWhereInput
    search: String
    sortBy: [SortCartItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [CartItem]

  """
   Search for the CartItem item with the matching ID.
  """
  CartItem(where: CartItemWhereUniqueInput!): CartItem

  """
   Perform a meta-query on all CartItem items which match the where clause.
  """
  _allCartItemsMeta(
    where: CartItemWhereInput
    search: String
    sortBy: [SortCartItemsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Order items which match the where clause.
  """
  allOrders(
    where: OrderWhereInput
    search: String
    sortBy: [SortOrdersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Order]

  """
   Search for the Order item with the matching ID.
  """
  Order(where: OrderWhereUniqueInput!): Order

  """
   Perform a meta-query on all Order items which match the where clause.
  """
  _allOrdersMeta(
    where: OrderWhereInput
    search: String
    sortBy: [SortOrdersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Brand items which match the where clause.
  """
  allBrands(
    where: BrandWhereInput
    search: String
    sortBy: [SortBrandsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Brand]

  """
   Search for the Brand item with the matching ID.
  """
  Brand(where: BrandWhereUniqueInput!): Brand

  """
   Perform a meta-query on all Brand items which match the where clause.
  """
  _allBrandsMeta(
    where: BrandWhereInput
    search: String
    sortBy: [SortBrandsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all TipoDePrenda items which match the where clause.
  """
  allTipoDePrendas(
    where: TipoDePrendaWhereInput
    search: String
    sortBy: [SortTipoDePrendasBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [TipoDePrenda]

  """
   Search for the TipoDePrenda item with the matching ID.
  """
  TipoDePrenda(where: TipoDePrendaWhereUniqueInput!): TipoDePrenda

  """
   Perform a meta-query on all TipoDePrenda items which match the where clause.
  """
  _allTipoDePrendasMeta(
    where: TipoDePrendaWhereInput
    search: String
    sortBy: [SortTipoDePrendasBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
