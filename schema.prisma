datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       Int        @id @default(autoincrement())
  nombre   String?
  apellido String?
  telefono String?
  email    String?    @unique
  password String?
  role     Role?      @relation("Userrole", fields: [roleId], references: [id])
  roleId   Int?       @map("role")
  cart     CartItem[] @relation("CartItemuser")
  orders   Order[]    @relation("Orderuser")

  @@index([roleId])
}

model Product {
  id                    Int            @id @default(autoincrement())
  articulo              String?
  nombre                String?
  descripcion           String?
  status                String?
  precio                Int?
  tipoDePrenda          String?
  marca                 String?
  imagen                ProductImage[] @relation("Product_imagen_many", references: [id])
  stock                 Stock[]        @relation("Product_stock_many", references: [id])
  from_CartItem_product CartItem[]     @relation("CartItemproduct")
}

model ProductImage {
  id                    Int         @id @default(autoincrement())
  image                 Json?
  altText               String?
  from_Product_imagen   Product[]   @relation("Product_imagen_many", references: [id])
  from_OrderItem_imagen OrderItem[] @relation("OrderItem_imagen_many", references: [id])
}

model Stock {
  id                 Int       @id @default(autoincrement())
  color              String?
  cantidadTalle0     Int?
  cantidadTalle1     Int?
  cantidadTalle2     Int?
  cantidadTalle3     Int?
  cantidadTalle4     Int?
  cantidadTalle5     Int?
  cantidadTalle6     Int?
  cantidadTalle7     Int?
  from_Product_stock Product[] @relation("Product_stock_many", references: [id])
}

model Role {
  id                Int      @id @default(autoincrement())
  name              String?
  canManageProducts Boolean?
  canSeeOtherUsers  Boolean?
  canManageUsers    Boolean?
  canManageRoles    Boolean?
  canManageCart     Boolean?
  canManageOrders   Boolean?
  assignedTo        User[]   @relation("Userrole")
}

model OrderItem {
  id           Int            @id @default(autoincrement())
  articulo     String?
  nombre       String?
  descripcion  String?
  status       String?
  precio       Int?
  tipoDePrenda String?
  talle        String?
  color        String?
  cantidad     Int?
  marca        String?
  imagen       ProductImage[] @relation("OrderItem_imagen_many", references: [id])
  order        Order?         @relation("OrderItemorder", fields: [orderId], references: [id])
  orderId      Int?           @map("order")

  @@index([orderId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int?
  product   Product? @relation("CartItemproduct", fields: [productId], references: [id])
  productId Int?     @map("product")
  user      User?    @relation("CartItemuser", fields: [userId], references: [id])
  userId    Int?     @map("user")

  @@index([productId])
  @@index([userId])
}

model Order {
  id     Int         @id @default(autoincrement())
  total  Int?
  charge String?
  items  OrderItem[] @relation("OrderItemorder")
  user   User?       @relation("Orderuser", fields: [userId], references: [id])
  userId Int?        @map("user")

  @@index([userId])
}